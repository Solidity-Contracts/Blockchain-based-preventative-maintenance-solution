// SPDX-License-Identifier: MIT
pragma solidity ^0.8.6;

contract RegistrationContract {
    address regulatoryAuthority;
    mapping(address => bool) authorized;
    mapping(address=>bool) isOracle;
    mapping(address => bool) isManufacturer;
    mapping(address => bool) isHospital;
    mapping(address => bool) isMaintenanceServiceProvider;
    

   struct Device {
        bool exists;
        address deviceAddress;
        string deviceModel;
        uint maintenanceStart;
        uint maintenanceInterval;
        bytes32 deviceManualHash;
        uint status; // 0, active from 1 to 5 the different phases of the maintenance
    }

    mapping(address => Device) devices;
    
    
    event StakeholderRegistered(address stakeholderAddress, string stakeholderType);
    event DeviceRegistered(address deviceAddress, string deviceModel, uint minMaintenanceInterval, uint maxMaintenanceInterval, bytes32 deviceManualHash);
    event OracleRegistered(address oracleAddress);

    constructor()  {
        regulatoryAuthority = msg.sender;
        authorized[regulatoryAuthority] = true;
    }
    
    modifier onlyAuthorized() {
        require(authorized[msg.sender], "Unauthorized");
        _;
    }
    function isOracleRegistered(address x) public view returns (bool){
        return isOracle[x];
    }
    function registerOracle(address oracle) public {
        require(!isOracle[oracle]);
        isOracle[oracle] = true;
        emit OracleRegistered(oracle);

    }
    function isHospitalAuthorized(address stakeholderAddress) public view returns (bool) {
    return isHospital[stakeholderAddress];
}
function checkStakeholderExistsForMaintenance(address stakeholderAddress) public view returns (bool) {
        if (isManufacturer[stakeholderAddress] || isMaintenanceServiceProvider[stakeholderAddress]) {
            return true;
        } else {
            return false;
        }
    }
    function addStakeholder(address stakeholderAddress, string memory stakeholderType) internal {
        require(!isManufacturer[stakeholderAddress], "Device manufacturer cannot be registered as a stakeholder");
        require(!isHospital[stakeholderAddress], "Hospital cannot be registered as a stakeholder");
        require(!isMaintenanceServiceProvider[stakeholderAddress], "Maintenance service provider cannot be registered as a stakeholder");
        
        if (keccak256(abi.encodePacked(stakeholderType)) == keccak256(abi.encodePacked("Manufacturer"))) {
            isManufacturer[stakeholderAddress] = true;
        } else if (keccak256(abi.encodePacked(stakeholderType)) == keccak256(abi.encodePacked("Hospital"))) {
            isHospital[stakeholderAddress] = true;
        } else if (keccak256(abi.encodePacked(stakeholderType)) == keccak256(abi.encodePacked("Maintenance Service Provider"))) {
            isMaintenanceServiceProvider[stakeholderAddress] = true;
        } else {
            revert("Invalid stakeholder type");
        }
        
        emit StakeholderRegistered(stakeholderAddress, stakeholderType);
    }
    
    function registerStakeholder(address stakeholderAddress, string memory stakeholderType) public onlyAuthorized {
        require(!authorized[stakeholderAddress], "Stakeholder already registered");
        
        addStakeholder(stakeholderAddress, stakeholderType);
        authorized[stakeholderAddress] = true;
    }
    
    function registerDevice(address deviceAddress, string memory deviceModel, uint maintenanceStart, uint maintenanceInterval, bytes32 deviceManualHash) public {
        require(isManufacturer[msg.sender], "Only a registered device manufacturer can register a device");
        require(devices[deviceAddress].deviceAddress != deviceAddress, "Device already registered");

        
        devices[deviceAddress] = Device(true, deviceAddress, deviceModel, maintenanceStart, maintenanceInterval, deviceManualHash,0);
        emit DeviceRegistered(deviceAddress, deviceModel, maintenanceStart, maintenanceInterval, deviceManualHash);
    }

    function checkDeviceExists(address deviceAddress) public view returns (bool) {
        return devices[deviceAddress].exists;
    }
    
    function checkStakeholderExists(address stakeholderAddress) public view returns (bool) {
        if (isManufacturer[stakeholderAddress] || isHospital[stakeholderAddress] || isMaintenanceServiceProvider[stakeholderAddress]) {
            return true;
        } else {
            return false;
        }
    }

    function isDeviceManufacturerAuthorized(address stakeholderAddress) public view returns (bool) {
    return isManufacturer[stakeholderAddress];
    }

}

contract MaintenanceContract {
    address owner;
    RegistrationContract regContract;

constructor(address registration) {
    owner = msg.sender;
    regContract = RegistrationContract(registration);

}
//for testing
//[true,"0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db","samsung",1684082993,"0x0000000000000000000000000000000000000000000000000000006d6168616d",0]


/*function performMaintenance(RegistrationContract.Device memory device) public {
    require(
        regContract.isOracleRegistered(msg.sender) == true &&
        block.timestamp >= device.minMaintenanceInterval &&
        block.timestamp <= device.maxMaintenanceInterval
    );

    device.status = 6;
    emit MaintenanceStartedby(msg.sender,device.deviceAddress, device.status);

    // Check if the current timestamp is beyond the max maintenance interval
    if (block.timestamp > device.maxMaintenanceInterval) {
        emit NoMaintenancePerformed(msg.sender, device.deviceAddress);
    }

}*/



function performMaintenance(RegistrationContract.Device memory device) public {
       require(
        regContract.isOracleRegistered(msg.sender) == true &&
        block.timestamp >= device.maintenanceStart &&
        block.timestamp <= device.maintenanceStart + device.maintenanceInterval
    );

        device.status = 6;
        emit MaintenanceStartedby(msg.sender, device.deviceAddress, device.status);

        // Check if the current timestamp is beyond the max maintenance interval
         if (block.timestamp > device.maintenanceStart + device.maintenanceInterval) {
            emit NoMaintenancePerformed(msg.sender, device.deviceAddress);
    }
    }





function performMaintenancebyHospital(RegistrationContract.Device memory device) public{
     require(regContract.isHospitalAuthorized(msg.sender) == true);
    device.status = 7;
    emit MaintenanceStartedbyHospital(msg.sender,device.deviceAddress, device.status);
}

//events
event InspectionCompleted(uint timestamp, address operator, address device, uint status);
event CleaningCompleted(uint timestamp, address operator, address device, uint status);
event TestingCompleted(uint timestamp, address operator, address device, uint status);
event CalibrationCompleted(uint timestamp, address operator, address device, uint status);
event DocumentationCompleted(uint timestamp, address operator, address device, uint status,bytes32 maintenaceReportHash);
event MaintenanceCompletedDeviceIsRestoredBack(uint timestamp, address operator, address device, uint maintenanceDueDate, uint status);
event MaintenanceStartedby(address oracle,address device, uint status);
event MaintenanceStartedbyHospital(address hospital, address device, uint status);
event NoMaintenancePerformed(address oracle,address device);

function performInspection(RegistrationContract.Device memory device)public {
    require(
       ((regContract.checkStakeholderExistsForMaintenance(msg.sender) == true)&& (device.status == 7 || (device.status == 6)) )
    && (regContract.checkDeviceExists(device.deviceAddress) == true));
    device.status = 1;
    emit InspectionCompleted(block.timestamp, msg.sender, device.deviceAddress,device.status);    
}
//[true,"0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db","samsung",1684082993,"0x0000000000000000000000000000000000000000000000000000006d6168616d",1]
function completeCleaning(RegistrationContract.Device memory device) public {
require (
    (regContract.checkStakeholderExistsForMaintenance(msg.sender) == true) 
         &&(device.status == 1)
    && (regContract.checkDeviceExists(device.deviceAddress) == true));
    device.status = 2;
    emit CleaningCompleted(block.timestamp, msg.sender, device.deviceAddress,device.status);
}

function performTesting(RegistrationContract.Device memory device) public {
require (
    (regContract.checkStakeholderExistsForMaintenance(msg.sender) == true)  
         
         &&(device.status == 2)
    && (regContract.checkDeviceExists(device.deviceAddress) == true));
    device.status = 3;
    emit TestingCompleted(block.timestamp, msg.sender, device.deviceAddress,device.status);
}

function doCalibration(RegistrationContract.Device memory device) public {
require (
    (regContract.checkStakeholderExistsForMaintenance(msg.sender) == true) 
         &&(device.status == 3)
    && (regContract.checkDeviceExists(device.deviceAddress) == true));
    device.status = 4;
    emit CalibrationCompleted(block.timestamp, msg.sender, device.deviceAddress,device.status);
}

function finalizeDocumentation(RegistrationContract.Device memory device, bytes32 maintenaceReportHash) public {
require (
    (regContract.checkStakeholderExistsForMaintenance(msg.sender) == true)  
         &&(device.status == 4)
    && (regContract.checkDeviceExists(device.deviceAddress) == true));
    device.status = 5;
    emit DocumentationCompleted(block.timestamp, msg.sender, device.deviceAddress,device.status,maintenaceReportHash );
}

function HandOverDevice(RegistrationContract.Device memory device)public{
   require (
    (regContract.checkStakeholderExistsForMaintenance(msg.sender) == true) 
         &&(device.status == 5)
    && (regContract.checkDeviceExists(device.deviceAddress) == true));
    device.status = 0;
    device.maintenanceStart= block.timestamp; //records the new time the maintenance was completed to be the new start time
    emit MaintenanceCompletedDeviceIsRestoredBack(block.timestamp, msg.sender, device.deviceAddress,device.maintenanceStart,device.status);

}
}


contract WarrantyContract {
    // Mapping to keep track of warranties registered for each device
    mapping(address => mapping(bytes32 => Warranty)) deviceWarranties;
    
    // Event emitted when a warranty is registered
    event WarrantyRegistered(address indexed deviceAddress, uint256 warrantyExpiration, string documentationHash);
    event WarrantyDeactivated(address indexed deviceAddress);
    event WarrantyClaimed(address indexed deviceAddress);

    // Struct to represent a warranty
    struct Warranty {
    address deviceManufacturer;
    bool registered ;
    uint256 warrantyDuration;
    uint256 warrantyExpiration;
    string documentationHash;
    bool isActive ;
}

    // Modifier to check that the caller is a registered device manufacturer
    modifier onlyManufacturer() {
        require(RegistrationContract(registrationContractAddress).checkStakeholderExists(msg.sender) && RegistrationContract(registrationContractAddress).isDeviceManufacturerAuthorized(msg.sender), "Only device manufacturers can call this function");
        _;
    }

    // Modifier to check that the device is registered
    modifier onlyRegisteredDevice(address deviceAddress) {
        require(RegistrationContract(registrationContractAddress).checkDeviceExists(deviceAddress), "Device is not registered");
        _;
    }
    
    // Address of the registration contract
    address public registrationContractAddress;

    // Constructor to set the registration contract address
    constructor(address _registrationContractAddress) {
        registrationContractAddress = _registrationContractAddress;
    }

    // Function to register a warranty for a device
   function registerWarranty(address deviceAddress, uint256 warrantyDuration, uint256 warrantyExpiration, string memory documentationHash) public onlyManufacturer onlyRegisteredDevice(deviceAddress) {
    // Check that the device doesn't already have a registered warranty
    require(!deviceWarranties[deviceAddress][keccak256(abi.encodePacked())].registered, "Device already has a registered warranty");

    // Register the warranty
    Warranty storage warranty = deviceWarranties[deviceAddress][keccak256(abi.encodePacked())];
    warranty.deviceManufacturer = msg.sender;
    warranty.registered = true;
    warranty.warrantyDuration = warrantyDuration;
    warranty.warrantyExpiration = warrantyExpiration;
    warranty.documentationHash = documentationHash;
    warranty.isActive = true;

    // Emit an event to indicate that the warranty has been registered
    emit WarrantyRegistered(deviceAddress, warrantyExpiration, documentationHash);
}


     function validateAndClaimWarranty(
        address deviceAddress,
        bool shouldClaim
    ) public onlyRegisteredDevice(deviceAddress) {
        require(RegistrationContract(registrationContractAddress).checkStakeholderExists(msg.sender),"Stakeholder is not registered");
        
        Warranty storage warranty = deviceWarranties[deviceAddress][keccak256(abi.encodePacked())];
        require(warranty.warrantyExpiration > block.timestamp, "Warranty has expired");

        if (shouldClaim) {
            deactivateWarranty(deviceAddress);
            emit WarrantyClaimed(deviceAddress);
        }
    }
    
    function deactivateWarranty(address deviceAddress) internal {
        Warranty storage warranty = deviceWarranties[deviceAddress][keccak256(abi.encodePacked())];
        require(warranty.isActive == true, "Warranty is already inactive.");

        warranty.isActive = false;
        warranty.warrantyExpiration = 0;
        warranty.documentationHash = "";
        emit WarrantyDeactivated(deviceAddress);
    }
}



contract PerformanceIncentiveContract {
    address registrationContractAddress;
    
    constructor(address _registrationContractAddress) {
        registrationContractAddress = _registrationContractAddress;
    }
    
    function payIncentive (
        address deviceAddress,
        address payable recipient,
        uint uptime,
        uint targetUptime,
        uint timePeriod
        
    ) public payable {
        // Check if caller is a hospital
        require(RegistrationContract(registrationContractAddress).checkStakeholderExists(msg.sender) && RegistrationContract(registrationContractAddress).isHospitalAuthorized(msg.sender), "Only hospitals can call this function");

        
        // Check if device exists
        require(RegistrationContract(registrationContractAddress).checkDeviceExists(deviceAddress), "Device does not exist");
        
       // Check if recipient is registered in the registration contract 
        require(RegistrationContract(registrationContractAddress).checkStakeholderExists(msg.sender), "Recipient not authorized");
        
        // Check if device uptime meets requirements
        uint uptimeThreshold = (targetUptime * timePeriod) / 100;
        require(uptime >= uptimeThreshold, "Device uptime does not meet requirements");
        
        // Execute payout to recipient
        recipient.transfer(msg.value);
        
        
        // Emit event
        emit IncentivePaid(deviceAddress, recipient, uptime, targetUptime, timePeriod, msg.value);
    }
    
    event IncentivePaid(
        address deviceAddress,
        address recipient,
        uint uptime,
        uint targetUptime,
        uint timePeriod,
        uint incentiveAmount
    );
}
